#!/usr/bin/python

import optparse
import os
import plistlib
import sys
import tempfile
import shutil
import subprocess
import tempfile
import xml.parsers.expat

from time import localtime

default_identifier = "com.grahamgilbert.first-boot-pkg"
default_launchd = "com.grahamgilbert.first-boot-pkg"
default_name = "first-boot.pkg"
default_output_dir = os.getcwd()
default_network = True
default_noreboot = False
default_noshutdown = True
default_retry_count = 10
default_sleep_count = 10
default_sign = 'None'
now = localtime()
default_version = "%04d.%02d.%02d" % (now.tm_year, now.tm_mon, now.tm_mday)
pkgbuild = "/usr/bin/pkgbuild"
productbuild = "/usr/bin/productbuild"

def fail(errmsg=''):
    '''Print any error message to stderr,
    clean up install data, and exit'''
    if errmsg:
        print >> sys.stderr, errmsg
    # exit
    exit(1)

def main():
    usage = "%prog [options]"
    o = optparse.OptionParser(usage=usage)
    
    o.add_option('-p', '--pkg', action="append", dest='packages',
        metavar='PACKAGE',
        help=("A package to include for installation. "
              "May be specified more than once. "))
    
    o.add_option("-v", "--version",
        default=default_version,
        help=("Version of the built package. Defaults to 'YYYY.MM.DD' "
              "derived from today's date. "))
              
    o.add_option("-i", "--identifier", default=default_identifier,
        help=("Identifier of the built package. Defaults to '%s'. "
              % default_identifier))

    o.add_option("--launchd", default=default_launchd,
        help=("Name of launch daemon. Defaults to '%s'. "
              % default_launchd))
    
    o.add_option("-n", "--name", 
        default=default_name,
        help=("Name of the built package. Defaults to '%s'. "
              % default_name))

    o.add_option("--network", action="store_true",
        default=default_network,
        help=("Wait for network to be available before installing packages. "))
        
    o.add_option("-o", "--output-dir",
        default=default_output_dir,
        help=("Path to save the resulting package. Defaults to the current "
              "working directory. "))

    o.add_option("--noreboot", action="store_true",
        default=default_noreboot,
        help=("Specify whether to not reboot after installing packages. "))

    o.add_option("--noshutdown", action="store_true",
        default=default_noshutdown,
        help=("Specify whether to not reboot after installing packages. "))

    o.add_option("--retry-count",
        default=default_retry_count,
        help=("Number of times to retry failed package installs. "
              "Defaults to %s. ")% default_retry_count)
              
    o.add_option("--sleep-count",
        default=default_sleep_count,
        help=("Amount of seconds to sleep when looking for network. "
              "Defaults to %s. ")% default_sleep_count)

    o.add_option("--sign",
        default=default_sign,
        help=("Sign the resulting package with the specified identity. "
              "Defaults to %s. ")% default_sign)
        
    o.add_option("--plist",
        help=("Optional. Path to an XML plist file containing "
              "key/value pairs for Version, Name, Output directory, Identifier, "
              "and Packages. "))
    
    opts, args = o.parse_args()
    
    # Check if we're using a plist. 
    # If there aren't packages and no plist (with packages in), bail
    plist_opts = {}
    if opts.plist:
        try:
            plist_opts = plistlib.readPlist(opts.plist)
        except (xml.parsers.expat.ExpatError, IOError), err:
            fail('Could not read %s: %s' % (opts.plist, err))
    
    if not opts.packages and not 'Packages' in plist_opts:
        print >> sys.stderr, ('ERROR: Must have at least one --pkg option!')
        o.print_usage()
        exit(1)
    
    # Need to be running as root
    if os.geteuid() != 0:
        print >> sys.stderr, 'You must run this as root, or via sudo!'
        exit(-1)
    
    # Make sure pkgbuild is available
    if not os.path.isfile(pkgbuild) or not os.access(pkgbuild, os.X_OK):
        print >> sys.stderr, ("A required exeuctable, '%s', could not be found "
                 "or is not executable!" % pkgbuild)
        exit(1)
    
    # Run over all of the packages and see if they look OK
    boot_packages = opts.packages or plist_opts.get('Packages')
    print 'Validating packages:'
    print '----------------------------------------------------------------'
    for pkg in boot_packages:
        if (not pkg.endswith('.pkg') and not pkg.endswith('.mpkg')):
            fail('%s doesn\'t look like a package!' % pkg)
        if not os.path.exists(pkg):
            fail('Package %s not found!' % pkg)
        print ('%s looks good.' % os.path.basename(pkg))
    print '----------------------------------------------------------------'
    
    # Check for version either on command line or plist
    version = opts.version
    if version == default_version and 'Version' in plist_opts:
        version = plist_opts.get('Version')
    
    # Name
    name = opts.name
    if name == default_name and 'Name' in plist_opts:
        # Not passed one via the command line and the setting is in the plist
        name = plist_opts.get('Name')
    
    # If the name doesn't end with .pkg, add it on
    if not name.endswith('.pkg'):
        name = name + '.pkg'
        
    # Identifer
    identifier = opts.identifier
    if identifier == default_identifier and 'Identifier' in plist_opts:
        # Not passed one via the command line and the setting is in the plist
        identifier = plist_opts.get('Identifier')
        
    # LaunchDaemon
    launchd = opts.launchd
    launchdplist = launchd + '.plist'
    if launchd == default_launchd and 'LaunchDaemonIdentifier' in plist_opts:
        # Not passed one via the command line and the setting is in the plist
        launchd = plist_opts.get('LaunchDaemonIdentifier')
        launchdplist = plist_opts.get('LaunchDaemonIdentifier') + '.plist'
    
    # Output 
    output_dir = opts.output_dir
    if output_dir == default_output_dir and 'Output' in plist_opts:
        # Not passed one via the command line and the setting is in the plist
        output_dir = plist_opts.get('Output')
    
    if not os.path.isdir(output_dir) or not os.access(output_dir, os.W_OK):
        sys.exit("Output directory '%s' either doesn't exist or is not writable!"
            % output_dir)
    
    # Network
    network = opts.network
    if network == default_network and 'Network' in plist_opts:
        network = plist_opts.get('Network')
    
    # No Reboot
    noreboot = opts.noreboot
    if noreboot == default_noreboot and 'NoReboot' in plist_opts:
        # Not passed one via the command line and the setting is in the plist
        noreboot = plist_opts.get('NoReboot')

    # No Shutdown
    noshutdown = opts.noshutdown
    if noshutdown == default_noshutdown and 'NoShutdown' in plist_opts:
        # Not passed one via the command line and the setting is in the plist
        noshutdown = plist_opts.get('NoShutdown')
    
    # Retry count
    retry_count = opts.retry_count
    if retry_count == default_retry_count and 'RetryCount' in plist_opts:
        retry_count = plist_opts.get('RetryCount')
        
    # sleep count
    sleep_count = opts.sleep_count
    if sleep_count == default_sleep_count and 'SleepCount' in plist_opts:
        sleep_count = plist_opts.get('SleepCount')
    
    # Everything is set, start building the package
    pkg_output_path = os.path.join(output_dir, name)
    root = tempfile.mkdtemp()
    firstboot_dir = 'usr/local/first-boot/'
    install_dir = os.path.join(root, firstboot_dir)
    os.makedirs(os.path.join(root, firstboot_dir))
    packages_dir = os.path.join(root, firstboot_dir, 'packages/')
    os.makedirs(packages_dir)
    
    # Get the number of packages.
    package_number = len(boot_packages)

    # Copy the packages into /usr/local/first-boot/packages
    counter = 0
    for package in boot_packages:
        # Rename the package so it has a number in front - will preserve the speficied order.
        package_name = os.path.basename(package)
        counter = counter + 1
        package_name = str(counter) + '-' +package_name
        package_name = package_name.zfill(package_number)

        # Get package name, check if it already exists in dir
        if os.path.exists(os.path.join(packages_dir, package_name)):
            print >> sys.stderr, ('%s already exists. Use a different package name')% os.path.join(packages_dir, package_name)
            exit(1)
        else:
            # Try to copy the file (flat packages) or directory (bundle-style)
            try:
                shutil.copy(package, os.path.join(packages_dir, package_name))
            except:
                shutil.copytree(package, os.path.join(packages_dir, package_name))
    
    # Create the config plist
    config_plist = {}
    config_plist['Network'] = network
    config_plist['NoReboot'] = noreboot
    config_plist['NoShutdown'] = noshutdown
    config_plist['RetryCount'] = retry_count
    config_plist['SleepCount'] = sleep_count
    config_plist['LaunchDaemon'] = launchdplist
    plistlib.writePlist(config_plist, os.path.join(root, firstboot_dir, 'config.plist'))
    
    # Copy the LaunchDaemon, LaunchAgent and LoginLog.app to the right places
    script_dir = os.path.dirname(os.path.realpath(__file__))
    launchDaemon_dir = os.path.join(root, 'Library', 'LaunchDaemons')
    os.makedirs(launchDaemon_dir)
    shutil.copy(os.path.join(script_dir, 'Resources', 
    'com.grahamgilbert.first-boot-pkg.plist'), os.path.join(launchDaemon_dir, 
    launchdplist))
    # Fix plist Label
    if "com.grahamgilbert.first-boot-pkg" in plistlib.readPlist(os.path.join(launchDaemon_dir, launchdplist))['Label']:
        plistlabel = plistlib.readPlist(os.path.join(launchDaemon_dir, launchdplist))
        plistlabel["Label"] = launchd
        plistlib.writePlist(plistlabel, os.path.join(launchDaemon_dir, launchdplist))
    # Set the permissions
    os.chmod(os.path.join(launchDaemon_dir, 
    launchdplist), 0644)
    os.chown(os.path.join(launchDaemon_dir, 
    launchdplist), 0, 0)
    
    launchAgent_dir = os.path.join(root, 'Library', 'LaunchAgents')
    os.makedirs(launchAgent_dir)
    shutil.copy(os.path.join(script_dir, 'Resources', 'se.gu.it.LoginLog.plist'), 
    os.path.join(launchAgent_dir, 'se.gu.it.LoginLog.plist'))
    # Set the permissions
    os.chmod(os.path.join(launchAgent_dir, 'se.gu.it.LoginLog.plist'), 0644)
    os.chown(os.path.join(launchAgent_dir, 'se.gu.it.LoginLog.plist'), 0, 0)

    shutil.copy(os.path.join(script_dir, 'Resources', 'se.gu.it.LoginLog.user.plist'), 
    os.path.join(launchAgent_dir, 'se.gu.it.LoginLog.user.plist'))
    # Set the permissions
    os.chmod(os.path.join(launchAgent_dir, 'se.gu.it.LoginLog.user.plist'), 0644)
    os.chown(os.path.join(launchAgent_dir, 'se.gu.it.LoginLog.user.plist'), 0, 0)
    
    helperTools_dir = os.path.join(root, 'Library', 'PrivilegedHelperTools')
    os.makedirs(helperTools_dir)
    shutil.copytree(os.path.join(script_dir, 'Resources', 'LoginLog.app'), 
    os.path.join(helperTools_dir, 'LoginLog.app'))
    # Set the permissions
    for root_dir, dirs, files in os.walk(os.path.join(helperTools_dir, 'LoginLog.app')):  
      for momo in dirs:  
        os.chown(os.path.join(root_dir, momo), 0, 0)
        os.chmod(os.path.join(root_dir, momo), 0755)
      for momo in files:
        os.chown(os.path.join(root_dir, momo), 0, 0)
        os.chmod(os.path.join(root_dir, momo), 0755)
    
    # copy the script
    shutil.copy(os.path.join(script_dir, 'Resources', 'first-boot'), os.path.join(install_dir, 'first-boot'))
    # Set the permissions
    os.chmod(os.path.join(install_dir, 'first-boot'), 0755)
    os.chown(os.path.join(install_dir, 'first-boot'), 0, 0)
    
    output_pkg_dir = tempfile.mkdtemp()
    output_pkg = os.path.join(output_pkg_dir,name)
    
    # All the files are there, build the package
    cmd = [
    pkgbuild,
    "--root", root,
    "--identifier", identifier,
    "--version", version,
    output_pkg
    ]

    # Build the package
    subprocess.call(cmd)

    # Build the distribution package
    dist_output = os.path.join(output_dir, name)
    cmd = [
    productbuild,
    "--package", output_pkg,
    dist_output
    ]

	# Taken from make-profile-pkg
    if opts.sign:
        # Use slice assignment to insert an additional option before the final argument
        cmd[-1:] = ["--sign", opts.sign, dist_output]

    subprocess.call(cmd)
    
    try:
        os.remove(output_pkg)
    except:
        pass

    
    shutil.rmtree(root)

if __name__ == '__main__':
    main()
